{
  "scanId": "b2f4e07f-eb60-49f8-8fb3-9946338bc056",
  "envId": "9ea2d642-8def-4406-a162-51fc81526f77",
  "envName": "GN_AWS",
  "summary": {
    "resources": 7,
    "violation": 8,
    "low": 1,
    "medium": 1,
    "high": 6,
    "native": 6,
    "inherit": 2,
    "drift": 0,
    "iacdrift": 0,
    "clouddrift": 0
  },
  "enforcingModeSummary": {
    "violation": 0,
    "low": 0,
    "medium": 0,
    "high": 0
  },
  "violations": [
    {
      "type": "aws_instance",
      "id": "aws_instance.acme_web",
      "name": "acme_web",
      "source": "https://bitbucket.org/accurics/ganesh_workspace.git/web.tf",
      "rule": "instanceWithNoVpc_1000",
      "vulnerability": "By default instances are launched in default VPC which is not recommended for production grade. AWS VPCs provides the controls to facilitate a formal process for approving and testing all network connections and changes to the firewall and router configurations.",
      "remediation": "Migrate from EC2 classic to VPCs. 1: Create a VPC. 2: Configure Your Security Group. 3: Create an AMI from Your EC2-Classic Instance. 4: Launch an Instance Into Your VPC. Detailed steps available at:Ã‚ http://docs.aws.amazon.com/AWSEC2/latest/UserGuide/vpc-migrate.html",
      "severity": "MEDIUM",
      "inference": "native",
      "policyName": "Accurics Security Best Practices for AWS v2",
      "ruleDisplayName": "Ensure that Instances are not configured under default Virtual Private Cloud",
      "policyMode": "Regular"
    }, 
    {
      "type": "aws_instance",
      "id": "aws_instance.acme_web",
      "name": "acme_web",
      "source": "https://bitbucket.org/accurics/ganesh_workspace.git/web.tf",
      "rule": "instanceWithIMDv1_1000",
      "vulnerability": "EC2 Instances are vulnerable to Server side request forgery",
      "remediation": "IMDv1 is vulnerable to SSRF attack. Thus, EC2 Instance should have metadata_options block with either http_endpoint attribute set to disabled or ensure http_tokens attribute is set to required. This ensures IMDv2 is being used.",
      "severity": "HIGH",
      "inference": "native",
      "policyName": "Accurics Security Best Practices for AWS v2",
      "ruleDisplayName": "Ensure that EC2 instances within have IMDv1 disabled.",
      "policyMode": "Regular"
    }, 
    {
      "type": "aws_instance",
      "id": "aws_instance.acme_web",
      "name": "acme_web",
      "source": "https://bitbucket.org/accurics/ganesh_workspace.git/web.tf",
      "rule": "port80OpenToInternet_1000",
      "vulnerability": "Security Groups - Unrestricted Specific Ports - http,80",
      "remediation": "Change cidr_block to non 0.0.0.0/0",
      "severity": "HIGH",
      "inference": "inherit",
      "inferenceSrc": "aws_security_group.acme_web",
      "policyName": "Accurics Security Best Practices for AWS v2",
      "ruleDisplayName": "Security Groups - Unrestricted Specific Ports - http,80",
      "policyMode": "Regular"
    }, 
    {
      "type": "aws_instance",
      "id": "aws_instance.acme_web",
      "name": "acme_web",
      "source": "https://bitbucket.org/accurics/ganesh_workspace.git/web.tf",
      "rule": "port22OpenToInternet_1000",
      "vulnerability": "Security Groups - Unrestricted Specific Ports - SSH,22",
      "remediation": "Change cidr_block to non 0.0.0.0/0",
      "severity": "HIGH",
      "inference": "inherit",
      "inferenceSrc": "aws_security_group.acme_web",
      "policyName": "Accurics Security Best Practices for AWS v2",
      "ruleDisplayName": "Security Groups - Unrestricted Specific Ports - SSH,22",
      "policyMode": "Regular"
    }, 
    {
      "type": "aws_security_group",
      "id": "aws_security_group.acme_elb",
      "name": "acme_elb",
      "source": "https://bitbucket.org/accurics/ganesh_workspace.git/elb.tf",
      "rule": "port80OpenToInternet_1000",
      "vulnerability": "Security Groups - Unrestricted Specific Ports - http,80",
      "remediation": "Change cidr_block to non 0.0.0.0/0",
      "severity": "HIGH",
      "inference": "native",
      "policyName": "Accurics Security Best Practices for AWS v2",
      "ruleDisplayName": "Security Groups - Unrestricted Specific Ports - http,80",
      "policyMode": "Regular"
    }, 
    {
      "type": "aws_security_group",
      "id": "aws_security_group.acme_web",
      "name": "acme_web",
      "source": "https://bitbucket.org/accurics/ganesh_workspace.git/web.tf",
      "rule": "port80OpenToInternet_1000",
      "vulnerability": "Security Groups - Unrestricted Specific Ports - http,80",
      "remediation": "Change cidr_block to non 0.0.0.0/0",
      "severity": "HIGH",
      "inference": "native",
      "policyName": "Accurics Security Best Practices for AWS v2",
      "ruleDisplayName": "Security Groups - Unrestricted Specific Ports - http,80",
      "policyMode": "Regular"
    }, 
    {
      "type": "aws_security_group",
      "id": "aws_security_group.acme_web",
      "name": "acme_web",
      "source": "https://bitbucket.org/accurics/ganesh_workspace.git/web.tf",
      "rule": "port22OpenToInternet_1000",
      "vulnerability": "Security Groups - Unrestricted Specific Ports - SSH,22",
      "remediation": "Change cidr_block to non 0.0.0.0/0",
      "severity": "HIGH",
      "inference": "native",
      "policyName": "Accurics Security Best Practices for AWS v2",
      "ruleDisplayName": "Security Groups - Unrestricted Specific Ports - SSH,22",
      "policyMode": "Regular"
    }, 
    {
      "type": "aws_vpc",
      "id": "aws_vpc.acme_root",
      "name": "acme_root",
      "source": "https://bitbucket.org/accurics/ganesh_workspace.git/main.tf",
      "rule": "vpcFlowLogsNotEnabled_1000",
      "vulnerability": "VPC Flow Logs is a feature that enables you to capture information about the IP traffic going to and from network interfaces in your VPC.",
      "remediation": "VPC Flow Logs provide visibility into network traffic that traverses the VPC and can be used to detect anomalous traffic or insight during security workflows. Perform the following to determine if VPC Flow logs is enabled: Via the Management Console: 1. Sign into the management console. 2. Select Services then VPC. 3. In the left navigation pane, select Your VPCs. 4. Select a VPC. 5. In the right pane, select the Flow Logs tab. 6. If no Flow Log exists, click Create Flow Log. 7. For Filter, select Reject. 8. Enter in a Role and Destination Log Group. 9. Click Create Log Flow. 10. Click on CloudWatch Logs Group. Additional Reference: CIS Amazon Web Services Foundations Benchmark v1.1.2, https://d0.awsstatic.com/whitepapers/compliance/AWS_CIS_Foundations_Benchmark.pdf",
      "severity": "LOW",
      "inference": "native",
      "policyName": "Accurics Security Best Practices for AWS v2",
      "ruleDisplayName": "Ensure VPC flow logging is enabled in all VPCs",
      "policyMode": "Regular"
    }
  ],
  "HasErrors": false
}
